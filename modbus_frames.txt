
***********************************************************************************************************

File prologue:

Author: Ashay Gatade
Description: This file contains the description of the all the MODBUS frames of all the Function code used in MODBUS
Souce: https://ozeki.hu/p_5880-mobdbus-function-code-5-write-single-coil.html

***********************************************************************************************************

List of function codes:

	Name								Function code
--------------------------------------------------------
Read (multiple) coils 						0x01
Read (multiple) holding registers 			0x03
Read (multiple) input registers 			0x04
Write single coil 							0x05
Write single (holding) register 			0x06
Write multiple coils 						0x0F
Write multiple (holding) register 			0x10
--------------------------------------------------------



****************************************************************************

Read (multiple) coils 						0x01		done

****************************************************************************

Read (multiple) coils REQUEST frame:

Slave_addr	|	Func_code	|	Base_addr	|	no of coils	|	CRC
	1				1				2			  	2			 2

Read (multiple) coils RESPONSE frame:

Slave_addr	|	Func_code	|	no of bytes	|	coil_status	|	CRC
	1				1				1			  1			 	 2

****************************************************************************

Read (multiple) holding registers 			0x03		done

****************************************************************************

Read (multiple) holding registers REQUEST frame:

Slave_addr	|	Func_code	|	Base_addr	|	no of reg	|	CRC
	1				1				2			  	2			 2

Read (multiple) holding registers RESPONSE frame:

Slave_addr	|	Func_code	|	no of bytes	|	data of a reg	|	CRC
	1				1				1			  	2			 	 2

Note: 
"data of reg" is a 2 byte value. There will be "no of bytes"/2 instances of data
Holding register should always start with base-address 0x00
Maximum no. of holding register which can be read at a time: 125 nos

****************************************************************************

Read (multiple) input registers 							0x04	done

****************************************************************************

Read (multiple) input registers REQUEST frame

Slave_addr	|	Func_code	|	Base_addr	|	no of reg	|	CRC
	1				1				2			  	2		 	 2

Read (multiple) input registers RESPONSE frame

Slave_addr	|	Func_code	|	no of bytes	|	data of a reg	|	CRC
	1				1				1			  	2		 	 	 2

Note: 
"data of reg" is a 2 byte value. There will be "no of bytes"/2 instances of data
It can read maximum upto 125 registers at a time
Base address = 0x00

****************************************************************************

Write single coil 							0x05		done

****************************************************************************

Write single coil REQUEST frame:

Slave_addr	|	Func_code	|	Base_addr	|	data	|	CRC
	1				1				2			  2			 2

Note: 
If coil needs to be turned ON, data = 0xFF00
If coil needs to be turned OFF, data = 0x0000

Write single coil RESPONSE frame:

(Same as request frame)


****************************************************************************

Write single (holding) register 			0x06		done

****************************************************************************

Write single (holding) register REQUEST frame:

Slave_addr	|	Func_code	|	Base_addr	|	data	|	CRC
	1				1				2			  2		 	 2


Write single (holding) register RESPONSE frame:

(RESPONSE frame is same as REQUEST frame)


****************************************************************************

Write multiple coils 						0x0F 			done

****************************************************************************

Write multiple coils REQUEST frame:

Slave_addr	|	Func_code	|	Base_addr	|	no of coils	|	no of bytes |	data	|	CRC
	1				1				2			  	2		 	 	1 			  1 		 2

Write multiple coils RESPONSE frame:

Slave_addr	|	Func_code	|	Base_addr	|	no of coils	|	CRC
	1				1				2			  	2		 	 2


****************************************************************************

Write multiple (holding) register 			0x10 			done

****************************************************************************

Write multiple (holding) register REQUEST frame:

Slave_addr	|	Func_code	|	Base_addr	|	no of reg	|	no of bytes	|	data	|	CRC
	1				1				2			  	2		 	 	1 			 2 			 2

Write multiple (holding) register RESPONSE frame:

Slave_addr	|	Func_code	|	Base_addr	|	no of reg	|	CRC
	1				1				2			  	2		 	 2

Note:
"data of reg" is a 2 byte value. There will be "no of bytes"/2 instances of data





Register name series (like 4xxxx for holding reg):
https://www.advantech.com/en/resources/white-papers/5d094a3b-9c70-48fa-ae48-580d351fa42d

Error codes:
Source 1: https://www.se.com/se/sv/faqs/FA386843/
Source 2: https://www.vtscada.com/help/Content/D_Tags/Dev_Modbus_ErrMsg.htm



[Note regarding broadcast (when slave id = 0) ]
Mostly used to broadcast timestamp for all nodes in the n/w